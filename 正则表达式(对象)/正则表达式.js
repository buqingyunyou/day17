/**
 * 正则表达式 (特殊的字符串模式,用于匹配)
 *  > 正则表达式是ECMAScript语法, 在浏览器和node.js平台都能使用
 *  > 正则表达式, 在JS中是一个对象, 叫 [正则对象]
 * 
 * 
 * 正则表达式, 用于操作 [字符串(文本)]
 * 
 * 
 * 正则表达式的作用:
 *  1) 匹配  (判断目标字符串中, 是否匹配正则规则, 返回布尔值)
 *  2) 提取  (表示获取字符串中符合条件的子串,以数组返回)
 *  3) 替换  (表示替换字符串中符合条件的子串,返回新字符串)
 * 
 * 
 *  (1) 匹配
 *    reg.test(str)   
 * 
 *  (2) 提取
 *    const reg = /xxx/g  (一般需要使用全局,返回多个值)
 *    str.match(reg)
 * 
 *  (3) 替换
 *    const reg = /xxx/g  (一般需要使用全局,替换所有满足条件的字符)
 *    str.replace(reg,要替换的字符)
 *
 * 
 * 正则表达式组成
 *  a) 普通字符   如: a,b,c,A...等
 *  b) 特殊字符(元字符)
 *    常用元字符:
 *        \d      表示匹配 数字 的字符
 *        \D      表示匹配 非数字 的字符
 *        \w      表示匹配 字母,数字,下划线,  等价于 [a-zA-Z0-9_]
 *        \W      表示匹配 非字母,数字,下划线 的字符
 *        \s      表示匹配 任意的 [空白符]
 *        \S      表示匹配 非空白符
 *        .       表示匹配 (除换行符) 以外的任意字符
 *        ^       表示匹配 以xx开头
 *        $       表示匹配 以xx结尾
 *    限定符:
 *        *     表示重复0~n次
 *        +     表示重复1-n次
 *        ?     表示重复0~1次
 *        {n}   表示重复n次
 *        {n,}  表示重复>=n次
 *        {n,m} 表示重复n~m次
 *    其他字符:
 *        []    表示只占一个字符位, []内部匹配为单选
 *        [^]   表示只占一个字符位, []内部匹配取反单选
 *        ()    表示分组
 *        \     转义符
 *        
 *  
 * 正则表达式格式:
 *    /ab/ :  表示字符串中, 包含(存在) 'ab' 字符串
 *    /[ab]/: 表示字符串中, 包含(存在) 'a'或者'b' 字符
 * 
 */